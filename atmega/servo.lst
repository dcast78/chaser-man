
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000568  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800166  00800166  00000662  2**0
                  ALLOC
  3 .stab         0000132c  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b7d  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000250d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3a       	cpi	r26, 0xAB	; 171
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  9e:	0c 94 b2 02 	jmp	0x564	; 0x564 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	00 90 5f 00 	lds	r0, 0x005F
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <__vector_18+0x1c>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <__vector_18+0x1e>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62

000000c8 <.LM1>:
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	80 81       	ld	r24, Z
  d0:	8a 83       	std	Y+2, r24	; 0x02

000000d2 <.LM2>:
    data = UART0_DATA;
  d2:	86 ec       	ldi	r24, 0xC6	; 198
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	8b 83       	std	Y+3, r24	; 0x03

000000dc <.LM3>:
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	88 71       	andi	r24, 0x18	; 24
  e0:	89 83       	std	Y+1, r24	; 0x01

000000e2 <.LM4>:
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  e2:	80 91 a8 01 	lds	r24, 0x01A8
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	8f 71       	andi	r24, 0x1F	; 31
  ea:	8c 83       	std	Y+4, r24	; 0x04

000000ec <.LM5>:
    
    if ( tmphead == UART_RxTail ) {
  ec:	80 91 a9 01 	lds	r24, 0x01A9
  f0:	9c 81       	ldd	r25, Y+4	; 0x04
  f2:	98 17       	cp	r25, r24
  f4:	19 f4       	brne	.+6      	; 0xfc <.L2>

000000f6 <.LM6>:
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	0b c0       	rjmp	.+22     	; 0x112 <.L3>

000000fc <.L2>:
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	80 93 a8 01 	sts	0x01A8, r24

00000102 <.LM8>:
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	8a 57       	subi	r24, 0x7A	; 122
 10a:	9e 4f       	sbci	r25, 0xFE	; 254
 10c:	2b 81       	ldd	r18, Y+3	; 0x03
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18

00000112 <.L3>:
    }
    UART_LastRxError = lastRxError;   
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	80 93 aa 01 	sts	0x01AA, r24

00000118 <.LM10>:
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	00 92 5f 00 	sts	0x005F, r0
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	00 90 5f 00 	lds	r0, 0x005F
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62

0000015c <.LM12>:
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 15c:	90 91 a6 01 	lds	r25, 0x01A6
 160:	80 91 a7 01 	lds	r24, 0x01A7
 164:	98 17       	cp	r25, r24
 166:	a1 f0       	breq	.+40     	; 0x190 <.L5>

00000168 <.LM13>:
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 168:	80 91 a7 01 	lds	r24, 0x01A7
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	8f 71       	andi	r24, 0x1F	; 31
 170:	89 83       	std	Y+1, r24	; 0x01

00000172 <.LM14>:
        UART_TxTail = tmptail;
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 93 a7 01 	sts	0x01A7, r24

00000178 <.LM15>:
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 178:	86 ec       	ldi	r24, 0xC6	; 198
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	22 2f       	mov	r18, r18
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	2a 59       	subi	r18, 0x9A	; 154
 184:	3e 4f       	sbci	r19, 0xFE	; 254
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <.L4>

00000190 <.L5>:
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 190:	81 ec       	ldi	r24, 0xC1	; 193
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	21 ec       	ldi	r18, 0xC1	; 193
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	2f 7d       	andi	r18, 0xDF	; 223
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18

000001a2 <.L4>:
    }
}
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	00 92 5f 00 	sts	0x005F, r0
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <uart_init+0x6>
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01

000001ce <.LM19>:
    UART_TxHead = 0;
 1ce:	10 92 a6 01 	sts	0x01A6, r1

000001d2 <.LM20>:
    UART_TxTail = 0;
 1d2:	10 92 a7 01 	sts	0x01A7, r1

000001d6 <.LM21>:
    UART_RxHead = 0;
 1d6:	10 92 a8 01 	sts	0x01A8, r1

000001da <.LM22>:
    UART_RxTail = 0;
 1da:	10 92 a9 01 	sts	0x01A9, r1

000001de <.LM23>:
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	99 23       	and	r25, r25
 1e4:	54 f4       	brge	.+20     	; 0x1fa <.L8>

000001e6 <.LM24>:
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	22 e0       	ldi	r18, 0x02	; 2
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18

000001f0 <.LM25>:
   		baudrate &= ~0x8000;
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	9f 77       	andi	r25, 0x7F	; 127
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01

000001fa <.L8>:
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 1fa:	85 ec       	ldi	r24, 0xC5	; 197
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	29 81       	ldd	r18, Y+1	; 0x01
 200:	3a 81       	ldd	r19, Y+2	; 0x02
 202:	23 2f       	mov	r18, r19
 204:	33 27       	eor	r19, r19
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18

0000020a <.LM27>:
    UBRR0L = (unsigned char) baudrate;
 20a:	84 ec       	ldi	r24, 0xC4	; 196
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	29 81       	ldd	r18, Y+1	; 0x01
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18

00000214 <.LM28>:

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 214:	81 ec       	ldi	r24, 0xC1	; 193
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	28 e9       	ldi	r18, 0x98	; 152
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18

0000021e <.LM29>:
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 21e:	82 ec       	ldi	r24, 0xC2	; 194
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	26 e0       	ldi	r18, 0x06	; 6
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18

00000228 <.LM30>:
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <uart_getc+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62

0000023c <.LM32>:
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 23c:	90 91 a8 01 	lds	r25, 0x01A8
 240:	80 91 a9 01 	lds	r24, 0x01A9
 244:	98 17       	cp	r25, r24
 246:	19 f4       	brne	.+6      	; 0x24e <.L10>

00000248 <.LM33>:
        return UART_NO_DATA;   /* no data available */
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	1b c0       	rjmp	.+54     	; 0x284 <.L11>

0000024e <.L10>:
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 24e:	80 91 a9 01 	lds	r24, 0x01A9
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	8f 71       	andi	r24, 0x1F	; 31
 256:	89 83       	std	Y+1, r24	; 0x01

00000258 <.LM35>:
    UART_RxTail = tmptail; 
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	80 93 a9 01 	sts	0x01A9, r24

0000025e <.LM36>:
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	88 2f       	mov	r24, r24
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	8a 57       	subi	r24, 0x7A	; 122
 266:	9e 4f       	sbci	r25, 0xFE	; 254
 268:	fc 01       	movw	r30, r24
 26a:	80 81       	ld	r24, Z
 26c:	8a 83       	std	Y+2, r24	; 0x02

0000026e <.LM37>:
    
    return (UART_LastRxError << 8) + data;
 26e:	80 91 aa 01 	lds	r24, 0x01AA
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	38 2f       	mov	r19, r24
 278:	22 27       	eor	r18, r18
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	88 2f       	mov	r24, r24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	82 0f       	add	r24, r18
 282:	93 1f       	adc	r25, r19

00000284 <.L11>:

}/* uart_getc */
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	00 d0       	rcall	.+0      	; 0x294 <uart_putc+0x6>
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	8a 83       	std	Y+2, r24	; 0x02

0000029a <.LM40>:
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 29a:	80 91 a6 01 	lds	r24, 0x01A6
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	8f 71       	andi	r24, 0x1F	; 31
 2a2:	89 83       	std	Y+1, r24	; 0x01

000002a4 <.LM41>:
	...

000002a6 <.L13>:
    
    while ( tmphead == UART_TxTail ){
 2a6:	80 91 a7 01 	lds	r24, 0x01A7
 2aa:	99 81       	ldd	r25, Y+1	; 0x01
 2ac:	98 17       	cp	r25, r24
 2ae:	d9 f3       	breq	.-10     	; 0x2a6 <.L13>

000002b0 <.LM43>:
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	88 2f       	mov	r24, r24
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	8a 59       	subi	r24, 0x9A	; 154
 2b8:	9e 4f       	sbci	r25, 0xFE	; 254
 2ba:	2a 81       	ldd	r18, Y+2	; 0x02
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18

000002c0 <.LM44>:
    UART_TxHead = tmphead;
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 93 a6 01 	sts	0x01A6, r24

000002c6 <.LM45>:

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2c6:	81 ec       	ldi	r24, 0xC1	; 193
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	21 ec       	ldi	r18, 0xC1	; 193
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	20 62       	ori	r18, 0x20	; 32
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18

000002d8 <.LM46>:

}/* uart_putc */
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <uart_puts+0x6>
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	9a 83       	std	Y+2, r25	; 0x02
 2ee:	89 83       	std	Y+1, r24	; 0x01

000002f0 <.LM48>:
    while (*s) 
 2f0:	0d c0       	rjmp	.+26     	; 0x30c <.L15>

000002f2 <.L16>:
      uart_putc(*s++);
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
 2f6:	fc 01       	movw	r30, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	28 2f       	mov	r18, r24
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	9a 83       	std	Y+2, r25	; 0x02
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	82 2f       	mov	r24, r18
 308:	0e 94 47 01 	call	0x28e	; 0x28e <uart_putc>

0000030c <.L15>:
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	88 23       	and	r24, r24
 316:	69 f7       	brne	.-38     	; 0x2f2 <.L16>

00000318 <.LM51>:
      uart_putc(*s++);

}/* uart_puts */
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	00 d0       	rcall	.+0      	; 0x32a <uart_puts_p+0x8>
 32a:	00 d0       	rcall	.+0      	; 0x32c <uart_puts_p+0xa>
 32c:	1f 92       	push	r1
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	9d 83       	std	Y+5, r25	; 0x05
 334:	8c 83       	std	Y+4, r24	; 0x04

00000336 <.LM53>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 336:	03 c0       	rjmp	.+6      	; 0x33e <.L18>

00000338 <.L19>:
      uart_putc(c);
 338:	81 2f       	mov	r24, r17
 33a:	0e 94 47 01 	call	0x28e	; 0x28e <uart_putc>

0000033e <.L18>:
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	9d 81       	ldd	r25, Y+5	; 0x05
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	8c 81       	ldd	r24, Y+4	; 0x04
 348:	9d 81       	ldd	r25, Y+5	; 0x05
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	9d 83       	std	Y+5, r25	; 0x05
 34e:	8c 83       	std	Y+4, r24	; 0x04
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	9a 81       	ldd	r25, Y+2	; 0x02
 354:	fc 01       	movw	r30, r24
 356:	14 91       	lpm	r17, Z+
 358:	1b 83       	std	Y+3, r17	; 0x03
 35a:	8b 81       	ldd	r24, Y+3	; 0x03

0000035c <.LBE2>:
 35c:	18 2f       	mov	r17, r24
 35e:	11 23       	and	r17, r17
 360:	59 f7       	brne	.-42     	; 0x338 <.L19>

00000362 <.LM56>:
      uart_putc(c);

}/* uart_puts_p */
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	08 95       	ret

00000374 <uart_available>:
Purpose:  Determine the number of bytes waiting in the receive buffer
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62

0000037c <.LM58>:
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 37c:	80 91 a8 01 	lds	r24, 0x01A8
 380:	88 2f       	mov	r24, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	9c 01       	movw	r18, r24
 386:	21 5e       	subi	r18, 0xE1	; 225
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	80 91 a9 01 	lds	r24, 0x01A9
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	a9 01       	movw	r20, r18
 394:	48 1b       	sub	r20, r24
 396:	59 0b       	sbc	r21, r25
 398:	ca 01       	movw	r24, r20
 39a:	2f e1       	ldi	r18, 0x1F	; 31
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	0e 94 81 02 	call	0x502	; 0x502 <__divmodhi4>

000003a4 <.LM59>:
}/* uart_available */
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <uart_flush>:
Purpose:  Flush bytes waiting the receive buffer.  Acutally ignores them.
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62

000003b2 <.LM61>:
        UART_RxHead = UART_RxTail;
 3b2:	80 91 a9 01 	lds	r24, 0x01A9
 3b6:	80 93 a8 01 	sts	0x01A8, r24

000003ba <.LM62>:
}/* uart_flush */
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <main>:
#define UART_BAUD_RATE      57600      

//Define per parsing comandi
#include <string.h>

int main(void) {
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	a8 97       	sbiw	r28, 0x28	; 40
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <.LM64>:
 //Port D pins as input
 DDRD=0x00;
 3d4:	8a e2       	ldi	r24, 0x2A	; 42
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	10 82       	st	Z, r1

000003dc <.LM65>:
 //Enable internal pull ups
 PORTD=0xFF;
 3dc:	8b e2       	ldi	r24, 0x2B	; 43
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18

000003e6 <.LM66>:
 //Set PORTB1 pin as output
 DDRB=0xFF;
 3e6:	84 e2       	ldi	r24, 0x24	; 36
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18

000003f0 <.LM67>:
 //TOP=ICR1;
 //Output compare OC1A 8 bit non inverted PWM
 //Clear OC1A on Compare Match, set OC1A at TOP
 //Fast PWM
 //ICR1=20000 defines 50Hz PWM
 ICR1=20000;
 3f0:	86 e8       	ldi	r24, 0x86	; 134
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	20 e2       	ldi	r18, 0x20	; 32
 3f6:	3e e4       	ldi	r19, 0x4E	; 78
 3f8:	fc 01       	movw	r30, r24
 3fa:	31 83       	std	Z+1, r19	; 0x01
 3fc:	20 83       	st	Z, r18

000003fe <.LM68>:
 TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(1<<COM1B1)|(0<<FOC1A)|(0<<FOC1B)|(1<<WGM11)|(0<<WGM10);
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	20 e8       	ldi	r18, 0x80	; 128
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	22 6a       	ori	r18, 0xA2	; 162
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18

00000410 <.LM69>:
 TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
 410:	81 e8       	ldi	r24, 0x81	; 129
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	21 e8       	ldi	r18, 0x81	; 129
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	2a 61       	ori	r18, 0x1A	; 26
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18

00000422 <.LM70>:
 //start timer with prescaler 8
 OCR1A=1500;
 422:	88 e8       	ldi	r24, 0x88	; 136
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	2c ed       	ldi	r18, 0xDC	; 220
 428:	35 e0       	ldi	r19, 0x05	; 5
 42a:	fc 01       	movw	r30, r24
 42c:	31 83       	std	Z+1, r19	; 0x01
 42e:	20 83       	st	Z, r18

00000430 <.LM71>:
 OCR1B=1700; // 2ms pulse to right motor on PB2
 430:	8a e8       	ldi	r24, 0x8A	; 138
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	24 ea       	ldi	r18, 0xA4	; 164
 436:	36 e0       	ldi	r19, 0x06	; 6
 438:	fc 01       	movw	r30, r24
 43a:	31 83       	std	Z+1, r19	; 0x01
 43c:	20 83       	st	Z, r18

0000043e <.LM72>:


 //Definizioni per serial uart    
 unsigned int c;
 char buffer[7];
 int  num=134;
 43e:	86 e8       	ldi	r24, 0x86	; 134
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	9c 83       	std	Y+4, r25	; 0x04
 444:	8b 83       	std	Y+3, r24	; 0x03

00000446 <.LM73>:
 char comando[25];
 int p_comando=0;
 446:	1a 82       	std	Y+2, r1	; 0x02
 448:	19 82       	std	Y+1, r1	; 0x01

0000044a <.LM74>:

 int x=0;
 44a:	1e 82       	std	Y+6, r1	; 0x06
 44c:	1d 82       	std	Y+5, r1	; 0x05

0000044e <.LM75>:
  *  with the macro 
  *  UART_BAUD_SELECT() (normal speed mode )
  *  or 
  *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
  */
 uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 44e:	80 e1       	ldi	r24, 0x10	; 16
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_init>

00000456 <.LM76>:

 /*
  * now enable interrupt, since UART library is interrupt controlled
  */
 sei();
 456:	78 94       	sei

00000458 <.LM77>:
  *  The string is buffered by the uart library in a circular buffer
  *  and one character at a time is transmitted to the UART using interrupts.
  *  uart_puts() blocks if it can not write the whole string to the circular 
  *  buffer
  */
 uart_puts("Servo controller startup\n\r");
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_puts>
 460:	01 c0       	rjmp	.+2      	; 0x464 <.L28>

00000462 <.L29>:
	...

00000464 <.L28>:
 //  itoa( OCR1A, buffer, 10);   // convert interger into string (decimal format)         
 //  uart_puts(buffer);        // and transmit string to UART
 //  uart_puts("\n\r" );
 // }
 for (;;) {
  c = uart_getc();
 464:	0e 94 19 01 	call	0x232	; 0x232 <uart_getc>
 468:	98 87       	std	Y+8, r25	; 0x08
 46a:	8f 83       	std	Y+7, r24	; 0x07

0000046c <.LM80>:
  if ( c & UART_NO_DATA )
 46c:	8f 81       	ldd	r24, Y+7	; 0x07
 46e:	98 85       	ldd	r25, Y+8	; 0x08
 470:	88 27       	eor	r24, r24
 472:	91 70       	andi	r25, 0x01	; 1
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	a9 f7       	brne	.-22     	; 0x462 <.L29>

00000478 <.LM81>:
  }
  else
  {

   //  uart_putc( (unsigned char)c );
   if (c=='\r') {
 478:	8f 81       	ldd	r24, Y+7	; 0x07
 47a:	98 85       	ldd	r25, Y+8	; 0x08
 47c:	8d 30       	cpi	r24, 0x0D	; 13
 47e:	91 05       	cpc	r25, r1
 480:	21 f5       	brne	.+72     	; 0x4ca <.L25>

00000482 <.LM82>:
    comando[p_comando]=0;
 482:	9e 01       	movw	r18, r28
 484:	20 5f       	subi	r18, 0xF0	; 240
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	9a 81       	ldd	r25, Y+2	; 0x02
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	fc 01       	movw	r30, r24
 492:	10 82       	st	Z, r1

00000494 <.LM83>:
    uart_puts("\n\rricevuto comando completo: ");
 494:	8b e1       	ldi	r24, 0x1B	; 27
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_puts>

0000049c <.LM84>:
    uart_puts(comando);
 49c:	ce 01       	movw	r24, r28
 49e:	40 96       	adiw	r24, 0x10	; 16
 4a0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_puts>

000004a4 <.LM85>:
    p_comando=0;
 4a4:	1a 82       	std	Y+2, r1	; 0x02
 4a6:	19 82       	std	Y+1, r1	; 0x01

000004a8 <.LM86>:
    if(strcmp(comando,"pos")==0) {
 4a8:	ce 01       	movw	r24, r28
 4aa:	40 96       	adiw	r24, 0x10	; 16
 4ac:	69 e3       	ldi	r22, 0x39	; 57
 4ae:	71 e0       	ldi	r23, 0x01	; 1
 4b0:	0e 94 a9 02 	call	0x552	; 0x552 <strcmp>
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	21 f4       	brne	.+8      	; 0x4c0 <.L26>

000004b8 <.LM87>:
     uart_puts("\n\rRiconosciuto comando: set posizione");
 4b8:	8d e3       	ldi	r24, 0x3D	; 61
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_puts>

000004c0 <.L26>:
    } ;
    uart_puts("\n\r");
 4c0:	83 e6       	ldi	r24, 0x63	; 99
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <uart_puts>

000004c8 <.LM89>:
   } else {
    comando[25]=0;
    p_comando=0;
   }
  }
 }
 4c8:	cc cf       	rjmp	.-104    	; 0x462 <.L29>

000004ca <.L25>:
    p_comando=0;
    if(strcmp(comando,"pos")==0) {
     uart_puts("\n\rRiconosciuto comando: set posizione");
    } ;
    uart_puts("\n\r");
   } else if (p_comando<24) {
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	88 31       	cpi	r24, 0x18	; 24
 4d0:	91 05       	cpc	r25, r1
 4d2:	9c f4       	brge	.+38     	; 0x4fa <.L27>

000004d4 <.LM91>:
    comando[p_comando]=c;
 4d4:	4f 81       	ldd	r20, Y+7	; 0x07
 4d6:	9e 01       	movw	r18, r28
 4d8:	20 5f       	subi	r18, 0xF0	; 240
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	9a 81       	ldd	r25, Y+2	; 0x02
 4e0:	82 0f       	add	r24, r18
 4e2:	93 1f       	adc	r25, r19
 4e4:	fc 01       	movw	r30, r24
 4e6:	40 83       	st	Z, r20

000004e8 <.LM92>:
    p_comando++;
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	9a 81       	ldd	r25, Y+2	; 0x02
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	89 83       	std	Y+1, r24	; 0x01

000004f2 <.LM93>:
    uart_putc( (unsigned char)c );
 4f2:	8f 81       	ldd	r24, Y+7	; 0x07
 4f4:	0e 94 47 01 	call	0x28e	; 0x28e <uart_putc>

000004f8 <.LM94>:
   } else {
    comando[25]=0;
    p_comando=0;
   }
  }
 }
 4f8:	b4 cf       	rjmp	.-152    	; 0x462 <.L29>

000004fa <.L27>:
   } else if (p_comando<24) {
    comando[p_comando]=c;
    p_comando++;
    uart_putc( (unsigned char)c );
   } else {
    comando[25]=0;
 4fa:	19 a6       	std	Y+41, r1	; 0x29

000004fc <.LM96>:
    p_comando=0;
 4fc:	1a 82       	std	Y+2, r1	; 0x02
 4fe:	19 82       	std	Y+1, r1	; 0x01

00000500 <.LM97>:
   }
  }
 }
 500:	b0 cf       	rjmp	.-160    	; 0x462 <.L29>

00000502 <__divmodhi4>:
 502:	97 fb       	bst	r25, 7
 504:	07 2e       	mov	r0, r23
 506:	16 f4       	brtc	.+4      	; 0x50c <__divmodhi4+0xa>
 508:	00 94       	com	r0
 50a:	07 d0       	rcall	.+14     	; 0x51a <__divmodhi4_neg1>
 50c:	77 fd       	sbrc	r23, 7
 50e:	09 d0       	rcall	.+18     	; 0x522 <__divmodhi4_neg2>
 510:	0e 94 95 02 	call	0x52a	; 0x52a <__udivmodhi4>
 514:	07 fc       	sbrc	r0, 7
 516:	05 d0       	rcall	.+10     	; 0x522 <__divmodhi4_neg2>
 518:	3e f4       	brtc	.+14     	; 0x528 <__divmodhi4_exit>

0000051a <__divmodhi4_neg1>:
 51a:	90 95       	com	r25
 51c:	81 95       	neg	r24
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__divmodhi4_neg2>:
 522:	70 95       	com	r23
 524:	61 95       	neg	r22
 526:	7f 4f       	sbci	r23, 0xFF	; 255

00000528 <__divmodhi4_exit>:
 528:	08 95       	ret

0000052a <__udivmodhi4>:
 52a:	aa 1b       	sub	r26, r26
 52c:	bb 1b       	sub	r27, r27
 52e:	51 e1       	ldi	r21, 0x11	; 17
 530:	07 c0       	rjmp	.+14     	; 0x540 <__udivmodhi4_ep>

00000532 <__udivmodhi4_loop>:
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	a6 17       	cp	r26, r22
 538:	b7 07       	cpc	r27, r23
 53a:	10 f0       	brcs	.+4      	; 0x540 <__udivmodhi4_ep>
 53c:	a6 1b       	sub	r26, r22
 53e:	b7 0b       	sbc	r27, r23

00000540 <__udivmodhi4_ep>:
 540:	88 1f       	adc	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	5a 95       	dec	r21
 546:	a9 f7       	brne	.-22     	; 0x532 <__udivmodhi4_loop>
 548:	80 95       	com	r24
 54a:	90 95       	com	r25
 54c:	bc 01       	movw	r22, r24
 54e:	cd 01       	movw	r24, r26
 550:	08 95       	ret

00000552 <strcmp>:
 552:	fb 01       	movw	r30, r22
 554:	dc 01       	movw	r26, r24
 556:	8d 91       	ld	r24, X+
 558:	01 90       	ld	r0, Z+
 55a:	80 19       	sub	r24, r0
 55c:	01 10       	cpse	r0, r1
 55e:	d9 f3       	breq	.-10     	; 0x556 <strcmp+0x4>
 560:	99 0b       	sbc	r25, r25
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
